@page "/settings"

@using System.Globalization;
@using System.ComponentModel;
@using WebCalc.Application.Contracts.Services.Formater;
@using WebCalc.Application.Contracts.Services.Settings;
@using WebCalc.Blazor.ViewModels.Pages.Settings;
@using WebCalc.Services;

@implements IDisposable 
@inject ISettingsViewModel viewModel

<div id="options-container">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container-fluid justify-content-start">
            <button class="btn btn-primary" @onclick=viewModel.NavigateBack>
                <i class="bi bi-arrow-left"></i>
            </button>
            <a class="navbar-brand mx-2">Settings</a>

            <div id="menu-buttons" class="d-flex gap-2">
                <button id="add-constant-button" class="btn btn-primary" type="button" @onclick="viewModel.SetDefaultSettingAsync">
                    Set default
                </button>
            </div>
        </div>
    </nav>

    <form class="mx-2 my-2">
        <div class="row">
            <div class="col">
                <label class="form-check-label">Delimiter of the groups of digits</label>
            </div>
            <div class="form-check form-switch col-auto">
                <input class="form-check-input" type="checkbox" @bind:after="viewModel.DelimeterOnChangedAsync" @bind="viewModel.DelimiterOn">
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col">
                <label class="form-check-label">Round up the result?(up to specified accuracy)</label>
            </div>
            <div class="form-check form-switch col-auto">
                <input class="form-check-input" type="checkbox" @bind:after="viewModel.RoundUpChangedAsync" @bind="viewModel.RoundUpOn">
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col">
                <label class="form-check-label">Accuracy of calculations <span id="accuracy">@viewModel.Accuracy</span> decimal places</label>
            </div>
            <div class="col-auto">
                <div class="d-flex gap-1">
                    <button class="btn btn-primary" @onclick="viewModel.IncrementAccuracyAsync" type="button">
                        <i class="bi bi-plus-lg"></i>
                    </button>
                    <button class="btn btn-secondary" @onclick="viewModel.DecrementAccuracyAsync" type="button">
                        <i class="bi bi-dash-lg"></i>
                    </button>
                </div>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col">
                <p class="form-check-label">
                    Sample:
                </p>
                <p id="sample" class="form-check-label">
                    @viewModel.Sample
                </p>
            </div>
        </div>
    </form>
</div>

<style>
    #increment {
        flex-grow: 2;
    }

    #menu-buttons{
        margin-left: auto;
    }

    #decrement {
        flex-grow: 1;
    }

    #accuracy-setting-buttons {
        display: flex;
        flex-direction: row;
        gap: 5px;
    }

    .setting-item {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
    }

    #settings {
        display: flex;
        flex-direction: column;
        width: 100%;
        margin-top: 5px;
    }

    #options-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    #accuracy{
        font-weight: bold;
        font-size: 20px;
    }

    #menu {
        display: flex;
        flex-direction: row;
        gap: 5px;
    }

    #title {
        font-size: 25px;
        margin-left: 5px;
    }

    #accuracy-setting-item{
        display: @accuracySettingDisplay;
    }

    #accuracy-setting-item-hr{
        display: @accuracySettingDisplay;
    }
</style>

@code {
    private const string NONE = "none";
    private const string FLEX = "flex";
    private string accuracySettingDisplay = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        viewModel.PropertyChanged += OnViewModelPropertyChanged;
        await viewModel.SetupSettingsAsync();

        accuracySettingDisplay = viewModel.RoundUpOn ? FLEX : NONE;
    }

    public void Dispose()
    {
        viewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(viewModel.RoundUpOn))
        {
            accuracySettingDisplay = viewModel.RoundUpOn ? FLEX : NONE;
        }

        StateHasChanged();
    }
}
