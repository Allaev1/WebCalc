@page "/settings"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using System.Globalization;
@using WebCalc.Application.Contracts.Services.Formater;
@using WebCalc.Application.Contracts.Services.Settings;
@using WebCalc.Blazor.ViewModels.Pages.Settings;
@using WebCalc.Services;
@using EventArgs = System.EventArgs;

@implements IDisposable 
@inject ISettingsViewModel viewModel

<div id="options-container">
    <SfAppBar id="menu" ColorMode="AppBarColor.Primary">
        <SfButton id="back-button" CssClass="e-round" OnClick="@viewModel.NavigateBack" IsPrimary="true">
            <span class="material-symbols-outlined">
                arrow_back
            </span>
        </SfButton>
        <span id="title">Options</span>
        <AppBarSpacer></AppBarSpacer>
        <SfButton IsPrimary="true" OnClick="@viewModel.SetDefaultSettingAsync">Set default</SfButton>
    </SfAppBar>

    <div id="settings">
        <div class="setting-item">
            <label>Delimiter of the groups of digits</label>
            <SfSwitch @bind-Checked="@viewModel.DelimiterOn" TChecked="bool" ValueChange="viewModel.DelimeterOnChangedAsync"></SfSwitch>
        </div>
        <hr />
        <div class="setting-item">
            <label id="accuracy-label">Accuracy of calculations <span id="accuracy">@viewModel.Accuracy</span> decimal places</label>
            <div id="accuracy-setting-buttons">
                <SfButton id="decrement" OnClick="viewModel.DecrementAccuracyAsync">-</SfButton>
                <SfButton id="increment" OnClick="viewModel.IncrementAccuracyAsync">+</SfButton>
            </div>
        </div>
        <hr />
        <div class="setting-item">
            <label>Round up the result?(up to specified accuracy)</label>
            <SfSwitch @bind-Checked="@viewModel.RoundUpOn" TChecked="bool" ValueChange="viewModel.RoundUpChangedAsync"></SfSwitch>
        </div>
        <hr />
        <div class="setting-item">
            <p>Sample:</p>
            <p id="sample">@viewModel.Sample</p>
        </div>
        <hr />
        <div class="setting-item">
            <label>Buttons vibration</label>
            <SfSwitch @bind-Checked="@viewModel.VibrationOn" TChecked="bool" ValueChange="viewModel.VibrationOnChangedAsync"></SfSwitch>
        </div>
    </div>
</div>

<style>
    #increment {
        flex-grow: 2;
    }

    #decrement {
        flex-grow: 1;
    }

    #accuracy-setting-buttons {
        display: flex;
        flex-direction: row;
        gap: 5px;
    }

    .setting-item {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
    }

    #settings {
        display: flex;
        flex-direction: column;
        width: 100%;
        margin-top: 5px;
    }

    #options-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    #accuracy{
        font-weight: bold;
        font-size: 20px;
    }

    #menu {
        display: flex;
        flex-direction: row;
        gap: 5px;
    }

    #title {
        font-size: 25px;
        margin-left: 5px;
    }
</style>

@code {
    protected override async Task OnInitializedAsync()
    {
        viewModel.PropertyChanged += OnViewModelPropertyChanged;

        await viewModel.SetupSettingsAsync();
    }

    public void Dispose()
    {
        viewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }
}
