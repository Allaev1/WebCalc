@page "/"

@using WebCalc.Application.Contracts.Services.Settings;
@using WebCalc.Blazor.Components
@using WebCalc.Blazor.Components.Dialogs
@using WebCalc.Blazor.ViewModels.Pages.Calculator;
@using WebCalc.Services;
@using WebCalc.Blazor.Components.Calc
@using EventArgs = System.EventArgs;

@implements IDisposable
@inject ICalculatorViewModel viewModel

<div id="calculator-container">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand">Calculator</a>
            <div class="d-flex gap-2">
                <button id="add-constant-button" class="btn btn-primary" type="button" @onclick="OnAddConstClick">
                    <i class="bi bi-plus-lg"></i>
                </button>
                <button id="settings-button" class="btn btn-primary" type="button" @onclick="viewModel.NavigateToSettings">
                    <i class="bi bi-person-gear"></i>
                </button>
            </div>
        </div>
    </nav>

    <Calc Id="calc" @ref="@calc" OnNavigateToConsts="viewModel.NavigateToConstants" IsRounding="true"></Calc>

    <Bootstrap5Dialog @ref="addingNewConstantDialog" YesNoDialog="true" OnYesClick="@(()=>viewModel.NavigateToAddingNewConstant(calc?.GetDisplayValue()!))"></Bootstrap5Dialog>

    <Bootstrap5Dialog @ref="cannotAddZeroAsConstantDialog" YesNoDialog="false"></Bootstrap5Dialog>
</div>

<style>
    #calculator-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
    }

    #calc {
        flex-grow: 1;
    }

    #menu {
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
        gap: 5px;
    }

    .menu-button {
        margin-top: 5px;
        margin-bottom: 5px;
        background: unset;
        border: unset;
        outline: unset;
    }
</style>

@code {
    private Calc? calc;
    private Bootstrap5Dialog? addingNewConstantDialog;
    private Bootstrap5Dialog? cannotAddZeroAsConstantDialog;

    protected override void OnInitialized()
    {
        viewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        await viewModel.SetRoundingFlagAsync();

        if (calc is null)
        {
            throw new ArgumentNullException();
        }

        calc.SetRoundingFlag(viewModel.IsRounding);
    }

    private void OnAddConstClick()
    {
        if (viewModel.GetIsPossibleToAddNewConstant())
        {
            if (addingNewConstantDialog is null)
            {
                throw new ArgumentNullException();
            }

            addingNewConstantDialog.Title = "Adding new constant";
            addingNewConstantDialog.Content = $"Do you want to add - {@calc?.GetDisplayValue()}, as constant ?";
            addingNewConstantDialog.Open();
        }
        else
        {
            if (cannotAddZeroAsConstantDialog is null)
            {
                throw new ArgumentNullException();
            }

            cannotAddZeroAsConstantDialog.Title = "Adding new constant denied";
            cannotAddZeroAsConstantDialog.Content = "You cannot add constant value with negative or zero value. Constant should be positive and non zero";
            cannotAddZeroAsConstantDialog.Open();
        }

    }

    public void Dispose()
    {
        viewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }
}