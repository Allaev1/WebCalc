@page "/consts"

@using System.Collections.ObjectModel;
@using WebCalc.Application.Contracts.Constants
@using WebCalc.Application.Contracts.Constants.DTO
@using WebCalc.Blazor.Components.Dialogs
@using WebCalc.Blazor.ViewModels.Pages.Consts;
@using WebCalc.Services
@using EventArgs = System.EventArgs;

@implements IDisposable
@inject IConstsViewModel viewModel

<div id="consts-container">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container-fluid justify-content-start">
            <button class="btn btn-primary" @onclick="viewModel.NavigateBack">
                <i class="bi bi-arrow-left"></i>
            </button>
            <a class="navbar-brand mx-2">Constants</a>

            <div id="menu-buttons" class="d-flex gap-2">
                <button id="add-constant-button" class="btn btn-primary" type="button" @onclick="viewModel.NavigateToAddEditConst">
                    <i class="bi bi-plus"></i>
                </button>
                <button class="btn btn-primary" type="button" disabled=@viewModel.EditDisabled @onclick="viewModel.NavigateToAddEditConst">
                    <i class="bi bi-pencil"></i>
                </button>
                <button class="btn btn-primary" type="button" disabled=@viewModel.DeleteDisabled @onclick="ShowDeleteDialog">
                    <i class="bi bi-trash-fill"></i>
                </button>
            </div>
        </div>
    </nav>

    <div class="list-group mx-2 my-1">
        @foreach (var constant in viewModel.Constants)
        {
            <a class="list-group-item list-group-item-action @(viewModel.SelectedConstant?.Id == constant.Id ? "active" : string.Empty)" @onclick="@(e => OnListViewItemSelected(constant.Id))" aria-current="@(()=>viewModel.SelectedConstant?.Id==constant.Id)">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@constant.Name</h5>
                </div>
                <p class="mb-1">@constant.Value</p>
                <small>@constant.Description</small>
            </a>
        }
    </div>

    <Bootstrap5Dialog @ref="deleteConstantDialog" YesNoDialog="true" OnYesClick="DeleteConstantAsync"></Bootstrap5Dialog>
</div>

<style>
    #page-title {
        font-size: 25px;
        margin-left: 5px;
    }

    #consts-app-bar {
        margin: 0;
    }

    #menu-buttons{
        margin-left: auto;
    }

    .e-round {
        margin: 2px;
        border-color: white;
    }

    .material-symbols-outlined {
        padding: 2px;
    }

    #list-view {
        flex-grow: 1;
    }

    #constant-template {
        display: flex;
        flex-direction: column;
    }

        #constant-template > p {
            margin-bottom: 0;
        }

    #constant-name {
        font-size: 36px;
        color: red;
    }

    #constant-value {
        font-size: 28px;
        color: blue;
    }

    #constant-description {
        font-size: 20px;
        color: gray;
    }

    #consts-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        align-items: stretch;
        gap: 5px;
    }
</style>

@code {
    private Bootstrap5Dialog? deleteConstantDialog;
    private bool deleteDialogVisible;

    private void CloseDeleteDialog()
    {
        deleteDialogVisible = false;
    }

    private void ShowDeleteDialog()
    {
        if (deleteConstantDialog is null)
        {
            throw new ArgumentNullException();
        }

        deleteConstantDialog.Title = "Delete dialog";
        deleteConstantDialog.Content = $"Delete constant - {viewModel.SelectedConstant?.Name}";
        deleteConstantDialog.Open();
    }

    private async Task DeleteConstantAsync()
    {
        deleteDialogVisible = false;

        await viewModel.DeleteConstantAsync();
    }

    private void OnListViewItemSelected(Guid id)
    {
        viewModel.SelectedConstant = viewModel.Constants.Single(x => x.Id == id);
    }

    protected override async Task OnInitializedAsync()
    {
        viewModel.Constants.Clear();
        await viewModel.SetConstantsAsync();

        viewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    public void Dispose()
    {
        viewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }
}
