@page "/consts"

@using System.Collections.ObjectModel;
@using WebCalc.Application.Contracts.Constants
@using WebCalc.Application.Contracts.Constants.DTO
@using WebCalc.Blazor.ViewModels.Pages.Consts;
@using WebCalc.Services
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using EventArgs = System.EventArgs;

@implements IDisposable
@inject IConstsViewModel viewModel

<div id="consts-container">
    <SfAppBar id="consts-app-bar" ColorMode="AppBarColor.Primary">
        <SfButton id="back-button" CssClass="e-round" OnClick="viewModel.NavigateBack" IsPrimary="true">
            <span class="material-symbols-outlined">
                arrow_back
            </span>
        </SfButton>
        <span id="page-title" class="regular">Constants</span>
        <AppBarSpacer></AppBarSpacer>
        <SfButton CssClass="e-round" IsPrimary="true" OnClick="viewModel.NavigateToAddEditConst">
            <span class="material-symbols-outlined">
                add
            </span>
        </SfButton>
        <SfButton CssClass="e-round" IsPrimary="true" Disabled="@editButtonDisabled" OnClick="viewModel.NavigateToAddEditConst">
            <span class="material-symbols-outlined">
                edit
            </span>
        </SfButton>
        <SfButton CssClass="e-round" IsPrimary="true" Disabled="@deleteButtonDisabled" OnClick="@(e => deleteDialogVisible = true)">
            <span class="material-symbols-outlined">
                delete
            </span>
        </SfButton>
    </SfAppBar>
    <SfListView ID="list-view" DataSource="@viewModel.Constants" CssClass="e-list-template" TValue="ConstantDto">
        <ListViewFieldSettings TValue="ConstantDto" Id="Id"></ListViewFieldSettings>
        <ListViewEvents TValue="ConstantDto" Clicked="@OnListViewItemSelected"></ListViewEvents>
        <ListViewTemplates TValue="ConstantDto">
            <Template>
                <div id="constant-template">
                    <p id="constant-name">@context.Name</p>
                    <p id="constant-value">@context.Value</p>
                    <p id="constant-description">@context.Description</p>
                </div>
            </Template>
        </ListViewTemplates>
    </SfListView>

    <SfDialog Target="#consts-container" Width="500px" @bind-Visible="deleteDialogVisible">
        <DialogTemplates>
            <Header>Delete dialog</Header>
            <Content>
                Delete constant - @viewModel.SelectedConstant?.Name
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton IsPrimary="true" OnClick="DeleteConstantAsync" Content="Delete"></DialogButton>
            <DialogButton OnClick="CloseDeleteDialog" Content="Cancel"></DialogButton>
        </DialogButtons>
    </SfDialog>
</div>

<style>
    #page-title{
        font-size: 25px;
        margin-left: 5px;
    }

    #consts-app-bar {
        margin: 0;
    }

    .e-round {
        margin: 2px;
        border-color: white;
    }

    .material-symbols-outlined {
        padding: 2px;
    }

    #list-view {
        flex-grow: 1;
    }

    #constant-template {
        display: flex;
        flex-direction: column;
    }

    #constant-template > p {
        margin-bottom: 0;
    }

    #constant-name {
        font-size: 36px;
        color: red;
    }

    #constant-value {
        font-size: 28px;
        color: blue;
    }

    #constant-description {
        font-size: 20px;
        color: gray;
    }

    #consts-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        align-items: stretch;
        gap: 5px;
    }
</style>

@code {
    private bool deleteButtonDisabled = true;
    private bool editButtonDisabled = true;
    private bool deleteDialogVisible;

    private void CloseDeleteDialog()
    {
        deleteDialogVisible = false;
    }

    private async Task DeleteConstantAsync()
    {
        deleteDialogVisible = false;
        deleteButtonDisabled = true;
        editButtonDisabled = true;

        await viewModel.DeleteConstantAsync();
    }

    private void OnListViewItemSelected(ClickEventArgs<ConstantDto> args)
    {
        deleteButtonDisabled = false;
        editButtonDisabled = false;

        viewModel.SelectedConstant = viewModel.Constants.Single(x => x.Id == args.ItemData.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        viewModel.Constants.Clear();
        await viewModel.SetConstantsAsync();

        viewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    public void Dispose()
    {
        viewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    private void OnViewModelPropertyChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }
}
