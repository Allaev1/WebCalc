@page "/addEditConst/{constantValue:float?}/{constantName?}/{constantDescription?}"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using WebCalc.Application.Contracts.Constants
@using WebCalc.Blazor.Validation
@using WebCalc.Domain.Constant.DomainManager
@using WebCalc.Services
@inject NavigationManager navigationManager
@inject IBackNavigateable backNavigateable
@inject IConstantAppService constantAppService

<div id="add-edit-const-container">
    <SfAppBar id="add-edit-const-app-bar" ColorMode="AppBarColor.Primary">
        <SfButton id="back-button" CssClass="e-round">
            <span class="material-symbols-outlined">
                arrow_back
            </span>
        </SfButton>
        <span id="title">@title</span>
    </SfAppBar>

    <EditForm Model="@tempConst" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <div class="add-edit-block">
            <label for="name-input">Name:</label>
            <SfTextBox ID="name-input" @bind-Value="tempConst.Name" Placeholder="Electricity price"></SfTextBox>
            <ValidationMessage For="@(()=>tempConst.Name)"></ValidationMessage>
        </div>

        <div class="add-edit-block">
            <label for="value-input">Value:</label>
            <SfNumericTextBox ID="value-input" @bind-Value="tempConst.Value" Placeholder="123.45"></SfNumericTextBox>
            <ValidationMessage For="@(()=>tempConst.Value)"></ValidationMessage>
        </div>

        <div class="add-edit-block">
            <label for="description-value">Description</label>
            <SfTextBox ID="description-value" @bind-Value="tempConst.Description" Placeholder="Electricity price in Uzbekistan"></SfTextBox>
        </div>

        <div id="save-back-container">
            <SfButton id="save-button" class="save-back-container-button">@saveButtonText</SfButton>
        </div>
    </EditForm>

    <SfDialog @bind-Visible="IsDialogVisible" Width="100%" ShowCloseIcon="true" Target="add-edit-const-container">
        <DialogTemplates>
            <Header>Operation result</Header>
            <Content>@dialogContent</Content>
        </DialogTemplates>
    </SfDialog>
</div>

<style>
    .material-symbols-outlined{
        padding:2px;
    }

    #title{
        font-size: 25px;
        margin-left: 5px;
    }

    #buttons-container {
        display: flex;
    }

    #save-button {
        background-color: #4CAF50;
        width: 20%;
        height: auto;
        margin: 10px;
        font-size: 25px;
    }

    #save-back-container {
        display: flex;
        justify-content: center;
    }

    #add-edit-const-container {
        display: flex;
        width: 100%;
        flex-direction: column;
        margin: 10px;
        row-gap: 20px;
    }

    .add-edit-block{
        margin-bottom: 10px;
    }

    .add-edit-block>label{
        font-size:25px;
    }
</style>

@code {
    private AddEditConstValidationModel tempConst = new();
    private string title = null!;
    private string dialogContent;
    private string saveButtonText = null!;
    private bool addingConstant;
    private bool IsDialogVisible { get; set; }

    [Parameter]
    public float? ConstantValue { get; set; }

    [Parameter]
    public string? ConstantName { get; set; }

    [Parameter]
    public string? ConstantDescription { get; set; }

    protected override void OnParametersSet()
    {
        addingConstant = ConstantName is null || ConstantValue is null;
        saveButtonText = addingConstant ? "Add" : "Save";
        title = addingConstant ? "Adding constant" : "Editing constant";
    }

    private async Task SaveAsync()
    {
        if (addingConstant)
        {
            await constantAppService.CreateAsync(new()
            {
                Name = tempConst.Name,
                Description = tempConst.Description,
                Value = tempConst.Value.Value
            });
            tempConst.Name = null;
            tempConst.Value = null;
            tempConst.Value = null;
            IsDialogVisible = true;
            dialogContent = "Constant added successfully";
        }
        else
        {
            throw new NotImplementedException();
        }

    }

    private void NavigateBack()
    {
        var location = backNavigateable.GetNaivgateBackLocation();
        navigationManager.NavigateTo(location);
    }
}
