@using WebCalc.Application.Contracts.BinaryOperation
@using WebCalc.Contracts
@using WebCalc.Domain.BinaryOperation
@using WebCalc.Domain.Shared
@using WebCalc.Services
@inject IBinaryOperationManager binaryOperationManager;
@implements ICalc
@inject NavigationManager navigationManager
@inject IBackNavigateable backNavigateable

<div class="container">
    <div id="menu">
        <button id="add-constant-button" class="menu-button" @onclick="NavigateToAddEditConst">add constant</button>
        <button class="menu-button">settings</button>
    </div>
    <CalcDisplay @ref="display" OnValidOperandGenerated="SetOperand" OnOperationTypeChanged="SetOperationType"></CalcDisplay>
    <CalcKeyboard OnButtonClick="UpdateDisplayAsync"></CalcKeyboard>
</div>

<style>
    #menu{
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
    }

    .menu-button{
        margin-top: 5px;
        margin-bottom: 5px;
    }

    #add-constant-button{
        margin-right: 5px;
    }

    .container {
        display: flex;
        flex-direction: column;
        width: auto;
        background: lightgray;
    }
</style>

@code {
    private CalcDisplay display;

    public string GetDisplayValue() => display.Value;

    public string GetDisplayMemory() => display.Memory;

    public string GetDisplayExpression() => display.Expression;

    private void NavigateToAddEditConst()
    {
        backNavigateable.AddCurrentLocation(navigationManager.Uri);
        navigationManager.NavigateTo($"/addEditConst/{display.Value}");
    }

    private async Task UpdateDisplayAsync(char value)
    {
        if (display is null) throw new NullReferenceException();

        if (value == Constants.MEMORY_ADD)
        {
            var memory = binaryOperationManager.GetMemoryAddResult(float.Parse(display!.Value));
            display.SetMemory(memory.ToString());
            return;
        }
        else if (value == Constants.MEMORY_CLEAR)
        {
            binaryOperationManager.ClearMemory();
            display.ClearMemory();
            return;
        }
        else if (value == Constants.MEMORY_READ)
        {
            display.ReadMemory();
            return;
        }
        else if (
            TryToBackspaceResult(value) ||
            TryToBackspaceAndOperand2IsZero(value) ||
            TryToExceedMaxCountOfCharsOnDisplay(value) ||
            TryToNegateZero(value) ||
            TryToBackspaceOperationType(value))
            return;
        else if (value == Constants.CLEAR)
        {
            display.Clear();
            binaryOperationManager.MainOperation.Clear();

            return;
        }
        else if (IsChainingCalculation(value))
        {
            binaryOperationManager.MainOperation.SetResult();
            binaryOperationManager.MainOperation.SetOperand(binaryOperationManager.MainOperation.Result);
            display.Clear();

            display.Append(binaryOperationManager.MainOperation.Operand1.ToString()!.ToArray());
        }
        else if (value == '=' && display.PercentageOff)
        {
            var result = binaryOperationManager.GetWithoutPercentage(int.Parse(display.Value));
            await display.AppendAsync(value);
            display.Append(result.ToString()!.ToArray());

            return;
        }
        else if (value == '=')
        {
            binaryOperationManager.MainOperation.SetResult();
            await display.AppendAsync(value);
            display.Append(binaryOperationManager.MainOperation.Result.ToString()!.ToArray());

            return;
        }
        else
        {
            if (binaryOperationManager.MainOperation.OperationState is BinaryOperationState.ResultSetted && (value == '+' || value == '-' || value == '*' || value == '/'))
            {
                display.Clear();
                display.Append(binaryOperationManager.MainOperation.Result.ToString()!.ToArray());
                binaryOperationManager.MainOperation.SetOperand(float.Parse(display.Value));
            }

            if (binaryOperationManager.MainOperation.OperationState is BinaryOperationState.ResultSetted && (char.IsDigit(value) || value == Constants.FLOATING_POINT))
            {
                display.Clear();
                binaryOperationManager.MainOperation.Clear();
            }

            if (value == Constants.NEGATION_OPERATION_SIGN)
            {
                binaryOperationManager.GetNegateOperand();
            }
        }

        await display.AppendAsync(value);
    }

    private void SetOperand(float operand)
    {
        binaryOperationManager.MainOperation.SetOperand(operand);
    }

    private void SetOperationType(OperationType operationType)
    {
        binaryOperationManager.MainOperation.SetOperationType(operationType);
    }

    private bool TryToBackspaceResult(char value)
        => binaryOperationManager.MainOperation.OperationState is BinaryOperationState.ResultSetted && value == Constants.BACKSPACE;

    private bool TryToExceedMaxCountOfCharsOnDisplay(char value)
        => display!.Value.Count() == display.MaxDisplayCharsCount && (char.IsDigit(value) || value == Constants.FLOATING_POINT);

    private bool TryToBackspaceAndOperand2IsZero(char value)
        => value == Constants.BACKSPACE && binaryOperationManager.MainOperation.Operand2 is 0;

    private bool TryToNegateZero(char value)
        => value == Constants.NEGATION_OPERATION_SIGN && display!.Value == "0";

    private bool TryToBackspaceOperationType(char value)
        => value == Constants.BACKSPACE &&
        binaryOperationManager.MainOperation.OperationType is not null &&
        binaryOperationManager.MainOperation.Operand2 is null;

    private bool IsChainingCalculation(char value) =>
        (value == '+' || value == '-' || value == '*' || value == '/') &&
        binaryOperationManager.MainOperation.Operand2 is not null;

    private void SetOperationType(char value)
    {
        switch (value)
        {
            case '+':
                binaryOperationManager.MainOperation.SetOperationType(OperationType.Addition);
                break;
            case '-':
                binaryOperationManager.MainOperation.SetOperationType(OperationType.Subtraction);
                break;
            case '*':
                binaryOperationManager.MainOperation.SetOperationType(OperationType.Multiplication);
                break;
            case '/':
                binaryOperationManager.MainOperation.SetOperationType(OperationType.Division);
                break;
            default:
                throw new ArgumentException();
        }
    }
}
