@using WebCalc.Application.Contracts.BinaryOperation
@inject IBinaryOperationAppService binaryOperationAppService;

<div class="keyboard">
    <div class="keyboard-keys row row-cols-4 g-1">
        <div class="child col">
            <button style="background-color: var(--color-button-memory);">M+</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-memory);">MC</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-back);">C</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-back);">BACK</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-memory);">MR</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-off);">%OFF</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-operator);">&plusmn;</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-operator);">&divide;</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('7')">7</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('8')">8</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('9')">9</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-operator);">&times;</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('4')">4</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('5')">5</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('6')">6</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-operator);">&minus;</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('1')">1</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('2')">2</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('3')">3</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-operator);">&plus;</button>
        </div>
        <div class="child col">
            <button id="const" style="background-color: var(--color-button-const);">CONST</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('0')">0</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-figure);" @onclick="()=>binaryOperationAppService.SetDisplayValue('.')">&sbquo;</button>
        </div>
        <div class="child col">
            <button style="background-color: var(--color-button-operator);">&equals;</button>
        </div>
    </div>
</div>

<style>
    * {
        --color-button-memory: green;
        --color-button-back: orange;
        --color-button-figure: rgb(0, 102, 255);
        --color-button-off: red;
        --color-button-const: black;
        --color-button-operator: rgb(0, 49, 139);
        --color-button-fore: white;
        --color-display-back: black;
        --color-display-fore: rgb(208, 255, 0);
        --color-calc-back: lightgrey;
        --color-body: rgb(173, 196, 238);
    }

    .keyboard {
        height: 100vh;
    }

    .keyboard-keys {
        height: 100%;
        width: 100%;
    }

    .child > button {
        background-color: rgb(14, 119, 180);
        color: aliceblue;
        height: 100%;
        width: 100%;
        border: none;
        border-radius: 8px;
    }

    @@media(max-width:280px) {
        .child > button {
            font-size: 12px;
        }

        #const {
            font-size: 10px;
        }
    }
</style>

@code{
    public void EditDisplayValue(char value)
    {
        binaryOperationAppService.SetDisplayValue(value);
    }
}